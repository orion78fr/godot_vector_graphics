#!/usr/bin/env python

Import('env')
Import('env_modules')

env_tove = env_modules.Clone()

env_tove.add_source_files(env.modules_sources, "*.cpp")

env_tove.add_source_files(env.modules_sources, "tove2d/src/cpp/*.cpp")
env_tove.add_source_files(env.modules_sources, "tove2d/src/cpp/mesh/*.cpp")
env_tove.add_source_files(env.modules_sources, "tove2d/src/cpp/shader/*.cpp")
env_tove.add_source_files(env.modules_sources, "tove2d/src/cpp/gpux/*.cpp")
env_tove.add_source_files(env.modules_sources, "tove2d/src/thirdparty/*.cpp")
env_tove.add_source_files(env.modules_sources, "tove2d/src/thirdparty/polypartition/src/*.cpp")
env_tove.add_source_files(env.modules_sources, "tove2d/src/thirdparty/tinyxml2/tinyxml2.cpp")

import os 
dir_path = Dir('.').abspath

if not env.msvc:
    env_tove.Append(CXXFLAGS=[
        '-std=c++11',
        '-DTOVE_GODOT',
        '-I' + os.path.join(dir_path, 'tove2d/src/thirdparty/fp16/include')])
else:
    env_tove.Append(CXXFLAGS=[
        '-DTOVE_GODOT',
        '-I' + os.path.join(dir_path, 'tove2d/src/thirdparty/fp16/include')])

def package_sl(target, source, env):
	with open(source[0].abspath, "r") as sl:
		with open(target[0].abspath, "w") as out:
			out.write('w << R"GLSL(\n')
			out.write(sl.read())
			out.write(')GLSL";\n')

env_tove.Append(BUILDERS={
	'PackageSL':Builder(action=package_sl)})

env_tove.PackageSL(
	'tove2d/src/glsl/fill.frag.inc',
	Glob('tove2d/src/glsl/fill.frag'))

env_tove.PackageSL(
	'tove2d/src/glsl/line.vert.inc',
	Glob('tove2d/src/glsl/line.vert'))
